<?php

namespace App\Logics\Services\src;

use App\Logics\Repositories\src\BookStoreRepository;
use App\Logics\Repositories\src\CoinLogRepository;
use App\Logics\Repositories\src\CommentRepository;
use App\Logics\Repositories\src\CommonSetRepository;
use App\Logics\Repositories\src\CommonTextRepository;
use App\Logics\Repositories\src\CouponLogRepository;
use App\Logics\Repositories\src\CouponRepository;
use App\Logics\Repositories\src\GoodsRepository;
use App\Logics\Repositories\src\NovelRepository;
use App\Logics\Repositories\src\NovelSectionRepository;
use App\Logics\Repositories\src\PlatformWechatRepository;
use App\Logics\Repositories\src\PrizeLogRepository;
use App\Logics\Repositories\src\PrizeRepository;
use App\Logics\Repositories\src\RechargeLogRepository;
use App\Logics\Repositories\src\RewardLogRepository;
use App\Logics\Repositories\src\SignLogRepository;
use App\Logics\Repositories\src\UserRepository;
use App\Logics\Services\Service;
use App\Logics\Traits\WechatTrait;
use Illuminate\Support\Facades\DB;

class CommonService extends Service {
    use WechatTrait;

    protected $commonSets;
    protected $commonTexts;
    protected $platformWechats;

	public function Repositories() {
		return [
		    'commonSets'    => CommonSetRepository::class,
            'commonTexts'   => CommonTextRepository::class,
            'platformWechats'   => PlatformWechatRepository::class,
		];
	}
    /**
     * 获取公共配置
     */
    public function CommonSets() {
        $type = request()->input('type');
        $name = request()->input('name');
        if (!$type) {
            throw new \Exception('参数错误！', 2000);
        }
        $data = $this->commonSets->values($type, $name);

        return $this->result($data);
    }
    /**
     * 获取公共长文本配置
     */
    public function CommonTexts() {
        $id = request()->input('id');
        if ($id) {
            $data = $this->commonTexts->FindById($id);
        } else {
            $type = request()->input('type');
            $name = request()->input('name');
            if (!$type || !$name) {
                throw new \Exception('参数错误！', 2000);
            }
            $data = $this->commonTexts->FindByTypeName($type, $name);
        }

        return $this->result($data);
    }
    /**
     * 获取带参数的二维码
     */
    public function ProductQRCode() {
        $novel_id = request()->input('novel_id');
        $section_id = request()->input('section_id');
        if (!$novel_id || !$section_id) {
            throw new \Exception('参数错误！', 2000);
        }
        $sess = $this->loginGetSession(true);
        $qrcode = $this->ProductParamsQRCode($sess['customer_id'], ['n'=>$novel_id, 's'=>$section_id, 'u'=>$sess['id']]);

        $qrcode = base64_encode($qrcode);
        $qrcode = 'data:image/png;base64,' . $qrcode;

        return $this->result(['qrcode'=>$qrcode]);
    }
    /**
     * 获取公众号信息
     */
    public function WechatInfo() {
        $customer_id = request()->input('customer_id');
        if (!$customer_id) {
            throw new \Exception('参数异常！', 2000);
        }
        $data = $this->platformWechats->find($customer_id, ['app_name', 'img']);
        if (!$data) {
            throw new \Exception('公众号信息获取失败！', 2001);
        }

<<<<<<< .mine
}
=======
        return $this->result($data);
    }

}>>>>>>> .r257
