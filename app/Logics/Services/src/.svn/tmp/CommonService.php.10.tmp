<?php

namespace App\Logics\Services\src;

use App\Logics\Repositories\src\BookStoreRepository;
use App\Logics\Repositories\src\CoinLogRepository;
use App\Logics\Repositories\src\CommentRepository;
use App\Logics\Repositories\src\CommonSetRepository;
use App\Logics\Repositories\src\CommonTextRepository;
use App\Logics\Repositories\src\CouponLogRepository;
use App\Logics\Repositories\src\CouponRepository;
use App\Logics\Repositories\src\CustomerRepository;
use App\Logics\Repositories\src\DomainRepository;
use App\Logics\Repositories\src\GoodsRepository;
use App\Logics\Repositories\src\NovelRepository;
use App\Logics\Repositories\src\NovelSectionRepository;
use App\Logics\Repositories\src\PlatformWechatRepository;
use App\Logics\Repositories\src\PrizeLogRepository;
use App\Logics\Repositories\src\PrizeRepository;
use App\Logics\Repositories\src\RechargeLogRepository;
use App\Logics\Repositories\src\RewardLogRepository;
use App\Logics\Repositories\src\SignLogRepository;
use App\Logics\Repositories\src\UserRepository;
use App\Logics\Repositories\src\WechatRepository;
use App\Logics\Services\Service;
use App\Logics\Traits\OfficialAccountTrait;
use App\Logics\Traits\PushmsgTrait;
use App\Logics\Traits\WechatTrait;
use Illuminate\Support\Facades\DB;

class CommonService extends Service {
    use OfficialAccountTrait, PushmsgTrait;

    protected $commonSets;
    protected $commonTexts;
    protected $platformWechats;
    protected $wechats;
    protected $customers;
    protected $domains;

	public function Repositories() {
		return [
            'domains'       => DomainRepository::class,
            'customers'     => CustomerRepository::class,
            'commonSets'    => CommonSetRepository::class,
            'commonTexts'   => CommonTextRepository::class,
            'wechats'       => WechatRepository::class,
            'platformWechats'   => PlatformWechatRepository::class,
		];
	}
    /**
     * 获取公共配置
     */
    public function CommonSets() {
        $type = request()->input('type');
        $name = request()->input('name');
        if (!$type) {
            throw new \Exception('参数错误！', 2000);
        }
        $data = $this->commonSets->values($type, $name);

        return $this->result($data);
    }
    /**
     * 获取公共长文本配置
     */
    public function CommonTexts() {
        $id = request()->input('id');
        if ($id) {
            $data = $this->commonTexts->FindById($id);
        } else {
            $type = request()->input('type');
            $name = request()->input('name');
            if (!$type || !$name) {
                throw new \Exception('参数错误！', 2000);
            }
            $data = $this->commonTexts->FindByTypeName($type, $name);
        }

        return $this->result($data);
    }
    /**
     * 获取带参数的二维码
     */
    public function ProductQRCode() {
        $novel_id = request()->input('novel_id');
        $section = request()->input('section', 1);
        if (!$novel_id || !$section) {
            throw new \Exception('参数错误！', 2000);
        }
        $sess = $this->loginGetSession(true);
        $qrcode = $this->ProductParamsQRCode($sess['customer_id'], ['n'=>$novel_id, 's'=>$section, 'u'=>$sess['id']]);

        $qrcode = base64_encode($qrcode);
        $qrcode = 'data:image/png;base64,' . $qrcode;

        return $this->result(['qrcode'=>$qrcode]);
    }
    /**
     * 获取公众号信息
     */
    public function WechatInfo() {
        $customer_id = request()->input('customer_id');
        if (!$customer_id) {
            throw new \Exception('参数异常！', 2000);
        }
        $data = $this->wechats->findBy('customer_id', $customer_id, ['name as app_name', 'img', 'appid']);
        if (!$data) {
            throw new \Exception('公众号信息获取失败！', 2001);
        }
        $data['customer_service'] = $this->commonSets->values('service', 'customer');
        if (strpos($data['customer_service'], 'http') === false) {
            $data['customer_service'] = CloudPreDomain() . $data['customer_service'];
        }

        return $this->result($data);
    }
    /**
     * 页面跳转
     */
    public function JumpTo() {
        $passwd = request()->input('passwd');
        if ($passwd) {
            // 加密之后的参数链接
            $params = json_decode(decrypt($passwd), 1);
            $route = $params['route'];
            $customer_id = isset($params['customer_id']) ? $params['customer_id'] : $params['cid'];
            $dtype = isset($params['dtype']) ? $params['dtype'] : 5;
        } else {
            // 暴露的参数链接
            $route = request()->input('route');
            $customer_id = request()->input('customer_id');
            if (!$customer_id) {
                $customer_id = request()->input('cid');
            }
            $dtype = request()->input('dtype', 5);
            $params = request()->input();
        }

        if ($host = $this->domains->typeDomain($dtype, $customer_id)) {
            // 跳转落地页域名
            $now = time();
            return '<a id="' . $now . '" href="' . $host . route('jumpto', $params, false) . '" style="position: fixed;top: 48%;text-align: center;color: #fff;">登录中...</a> 
                    <script>
                        document.getElementById("'. $now .'").click();
                    </script>';
            // window.location.href = "' . $host . route('jumpto', $params, false) . '"
            // return redirect($host . route('jumpto', $params, false));
        }
        unset($params['route']);
        if (!isset($params['cid']) || !$params['cid']) {
            // 没有cid需要设置一个cid
            $params['cid'] = $params['customer_id'];
        }

        if ($route == 'section') {
            if (request()->input('otherdo') == 'secondpush') {
                // 执行新用户二次推送
                $sess = $this->loginGetSession(true);
                $this->pushSecondMsg($sess, request()->input('novel_id'), request()->input('customer_id'));
            }
        }


        // 配置页面地址
        /*
        $read_log   = $host . "/{$web_tpl}/#/book-history.html?cid={$customer_id}"; // 阅读记录
        $selection  = $host . "/{$web_tpl}/#/index.html?cid={$customer_id}";// 精品书城
        $signpage   = $host . "/{$web_tpl}/#/sign-in.html?cid={$customer_id}";  // 签到送币
        $hot_rank   = $host . "/{$web_tpl}/#/list/weekly-man.html?cid={$customer_id}";  // 热门排行榜
        $all_rank   = $host . "/{$web_tpl}/#/top-list..html?cid={$customer_id}";  // 榜单
        $week_news  = $host . "/{$web_tpl}/#/list/news-man.html?cid={$customer_id}";  // 本周新书
        $my_center  = $host . "/{$web_tpl}/#/mine.html?cid={$customer_id}"; // 个人信息
        $novel_index= $host . "/{$web_tpl}/#/index.html?cid={$customer_id}";  // 书城首页
        $customer_service   = $host ."/{$web_tpl}/#/contact.html?cid={$customer_id}";  // 联系客服
        $index_recommend    = $host . "/{$web_tpl}/#/index.html?cid={$customer_id}";  // 首页推荐
        $recharge_coin      = $host . "/{$web_tpl}/#/pay.html?cid={$customer_id}";  // 充值书币
        $first_recharge     = $host . "/{$web_tpl}/#/activity-recharge.html?cid={$customer_id}";  // 首充优惠

        // 小说详情 /#/detail/novel-16.html   16 是小说id
        // 小说阅读（章节详情） /#/read/16-0.html     16 是小说id ；0 是小说章节
        return redirect('/'.$customer['web_tpl'].'/#/read/'. $novel_id .'-'. $section .'.html?cid='.$customer_id.'&otherdo='.$otherdo.'&subscribe='.$subscribe_section);
        */
        /*$pages = [
            'first_recharge'    => '/#/activity-recharge.html',
            'recharge'          => '/#/pay.html',
            'read_log'          => '/#/book-history.html',
            'index'             => '/#/index.html',
            'sign'              => '/#/sign-in.html',
            'hot_rank'          => '/#/list/weekly-man.html',
            'rank'              => '/#/top-list..html',
            'week_news'         => '/#/list/news-man.html',
            'center'            => '/#/mine.html',
            'contact'           => '/#/contact.html',
            'novel'             => '/#/detail/novel-{novel_id}.html',
            'section'           => '/#/read/{novel_id}-{section_num}.html',
        ];*/
        $pages = config('frontpage');

        if (isset($pages[$route])) {
            $url = $pages[$route];
            switch ($route) {
                case 'novel':
                    $url = str_replace('{novel_id}', $params['novel_id'], $url);
                    unset($params['novel_id']);
                    break;
                case 'section':
                    $url = str_replace(['{novel_id}', '{section_num}'], [$params['novel_id'], $params['section_num']], $url);
                    unset($params['section']);
                    unset($params['novel_id']);
                    break;
                default:
                    break;
            }
        } else {
            $url = $pages['index'];
        }
        if ($params) {
            $url .= '?' . http_build_query($params);
        }

        $customer = $this->customers->find($customer_id, ['web_tpl']);

        $url = '/' . $customer['web_tpl'] . $url;

        return redirect($url);
    }

}
